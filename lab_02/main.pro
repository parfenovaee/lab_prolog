implement main
    open core, stdio, file

domains
    gender = мужской; женский.

class facts - company
    сотрудник : (string ID_сотрудника, string Имя_сотрудника, gender Пол, string Дата_рождения, string Дата_Работа).
    отдел : (string ID_отдела, string Название_отдела).
    должность : (string ID_должности, string Название_должности, string Название_отдела, integer Зарплата).
    занимает : (string ID_сотрудника, string ID_должности, string Дата_Работа).

class facts
    sr : (real Salary) single.

clauses
    sr(0).

class predicates
    сотрудник_в_отделе : (string Название_отдела) nondeterm.
    руководители_всех_отделов : ().
    иерархия_сотрудников_по_отделу : (string Название_отдела).
    средняя_зарплата : (string Название_отдела) nondeterm.
    сотрудники_по_полу : (gender).

%правило, которое выводит сотрудников по отделу
clauses
    сотрудник_в_отделе(Название_отдела) :-
        writef("\tСотрудники в отделе %:\n", Название_отдела),
        отдел(ID_отдела, Название_отдела),
        должность(ID_должности, _, ID_отдела, _),
        занимает(ID_сотрудника, ID_должности, _),
        сотрудник(ID_сотрудника, Имя_сотрудника, _, _, _),
        writef("\tИмя сотрудника: %\n", Имя_сотрудника),
        fail.
    сотрудник_в_отделе(Название_отдела) :-
        отдел(_, Название_отдела),
        write("\tКонец списка"),
        writef("\n"),
        nl.

%правило, которое выводмит руководителей всех отделов
clauses
    руководители_всех_отделов() :-
        writef("\tРуководители всех отделов:\n"),
        отдел(ID_отдела, Название_отдела),
        (должность("М001", Название_должности, ID_отдела, _) and занимает(ID_сотрудника, "М001", _)
            or должность("Р001", Название_должности, ID_отдела, _) and занимает(ID_сотрудника, "Р001", _)
            or должность("Н001", Название_должности, ID_отдела, _) and занимает(ID_сотрудника, "Н001", _)),
        сотрудник(ID_сотрудника, Имя_сотрудника, _, _, _),
        writef("\tОтдел: %\n", Название_отдела),
        writef("\tДолжность: %\n", Название_должности),
        writef("\tИмя сотрудника: %\n", Имя_сотрудника),
        write("\n"),
        fail.
    руководители_всех_отделов() :-
        write("\tКонец списка"),
        write("\n"),
        nl.

%правило, которое выводит иерерахию должностей в определенном отеделе
clauses
    иерархия_сотрудников_по_отделу(Название_отдела) :-
        writef("\tИерархия должностей в отделе %:\n", Название_отдела),
        отдел(ID_отдела, Название_отдела),
        (должность("М001", Руководитель, ID_отдела, _) and должность("М543", Подчиненный, ID_отдела, _)
            or должность("Р001", Руководитель, ID_отдела, _) and должность("Р297", Подчиненный, ID_отдела, _)
            or должность("Н001", Руководитель, ID_отдела, _) and должность("Н174", Подчиненный, ID_отдела, _)),
        writef("\tРуководитель: %\n", Руководитель),
        writef("\tПодчиненный: %\n", Подчиненный),
        fail.
    иерархия_сотрудников_по_отделу(_) :-
        write("\n"),
        nl.

%правило подсчета средней зарплаты по отделу
clauses
    средняя_зарплата(Название_отдела) :-
        отдел("М5", Название_отдела),
        должность("М001", _, "М5", ЗП1),
        должность("М543", _, _, ЗП2),
        должность("М543", _, _, ЗП3),
        sr(Salary),
        assert(sr((Salary + ЗП1 + ЗП2 + ЗП3) / 3))
        or
        отдел("Р2", Название_отдела),
        должность("Р001", _, _, ЗП1),
        должность("Р297", _, _, ЗП2),
        должность("Р297", _, _, ЗП3),
        должность("Р297", _, _, ЗП4),
        sr(Salary),
        assert(sr((ЗП1 + ЗП2 + ЗП3 + ЗП4) / 4))
        or
        отдел("Н1", Название_отдела),
        должность("Н001", _, _, ЗП1),
        должность("Н174", _, _, ЗП2),
        должность("Н174", _, _, ЗП3),
        sr(Salary),
        assert(sr((Salary + ЗП1 + ЗП2 + ЗП3) / 3)),
        fail.
    средняя_зарплата(Название_отдела) :-
        отдел(_, Название_отдела),
        sr(Salary),
        writef("\tСредняя зарплата в отделе % составляет %\n", Название_отдела, Salary),
        write("\n"),
        nl.

%правило, которое выводт список сотрудников по полу(используется домен)
clauses
    сотрудники_по_полу(Пол) :-
        writef("\tВсе сотрудники компании пола '%'\n", Пол),
        сотрудник(_, Имя_сотрудника, Пол, _, _),
        writef("\tИмя_сотрудника: %\n", Имя_сотрудника),
        fail.
    сотрудники_по_полу(_) :-
        write("\tКонец списка"),
        write("\n"),
        nl.

clauses
    run() :-
        file::consult("..\\company.txt", company),
        fail.

%Варианты: Маркетинг, Разработка, HR
    run() :-
        сотрудник_в_отделе("HR"),
        fail.

    run() :-
        руководители_всех_отделов(),
        fail.

%Варианты: Маркетинг, Разработка, HR
    run() :-
        иерархия_сотрудников_по_отделу("Маркетинг"),
        fail.

%Варианты: Маркетинг, Разработка, HR
    run() :-
        средняя_зарплата("Разработка"),
        fail.

%Варианты: женский, мужской
    run() :-
        сотрудники_по_полу(женский),
        fail.

    run().

end implement main

goal
    console::run(main::run).
