% Copyright

implement main
    open core, stdio

domains
    gender = мужской; женский.
    %структуры для вывода данных
    сотрудник_должность_отдел = сотрудник_должность_отдел(string Имя_сотрудника, string Должность, real Зарплата).
    руководители_отделов = руководители_отделов(string Название_отдела, string Имя_сотрудника, string Должность).

class facts - company
    сотрудник : (string ID_сотрудника, string Имя_сотрудника, gender Пол, string Дата_рождения, string Дата_Работа, integer Опыт_работы).
    отдел : (string ID_отдела, string Название_отдела).
    должность : (string ID_должности, string Название_должности, string ID_отдела, integer Зарплата).
    занимает : (string ID_сотрудника, string ID_должности, string Дата_Работа).

class predicates
    сотрудники_в_отделе : (string Название_отдела) -> string* Имена determ.
    инфо_о_сотрудниках : (string Название_отдела) -> сотрудник_должность_отдел* determ.
    кол_человек : (string Название_отдела) -> integer N determ.
    инфо_о_руководителях : () -> руководители_отделов*.
    общая_зп_по_отделу : (string Название_отдела) -> real Sum determ.
    средняя_зп_по_отделу : (string Название_отдела) -> real Average determ.
    сотрудник_по_опыту_работы : (string Название_отдела) -> string* Опыт determ.
    сотрудники_по_заданной_должности : (string Название_должности) -> string* Должности_сотрудники determ.
    кол_сотрудников : (string Должность) -> integer G determ.
    %предикаты для вывода структур
    write_list_2 : (сотрудник_должность_отдел* Инфа_о_сотрудниках).
    write_list_3 : (руководители_отделов* Инфа_о_руководителях).
    %предикаты для вычисления длины, суммы и среднего списка
    длина : (A*) -> integer N.
    сумма_элем : (real* List) -> real Sum.
    среднее_списка : (real* List) -> real Average determ.

%Вычисление длины, суммы и среднего списка
clauses
    длина([]) = 0.
    длина([_ | T]) = длина(T) + 1.

    сумма_элем([]) = 0.
    сумма_элем([H | T]) = сумма_элем(T) + H.

    среднее_списка(L) = сумма_элем(L) / длина(L) :-
        длина(L) > 0.

clauses
%список сотрудников мужского пола в определнном отделе
    сотрудники_в_отделе(Название_отдела) = List1 :-
        отдел(ID_отдела, Название_отдела),
        !,
        List1 =
            [ Имя_сотрудника ||
                должность(ID_должности, _, ID_отдела, _),
                занимает(ID_сотрудника, ID_должности, _),
                сотрудник(ID_сотрудника, Имя_сотрудника, Пол, _, _, _),
                Пол = мужской
            ].
%определения длины предыдущего списка
    кол_человек(Название_отдела) = длина(сотрудники_в_отделе(Название_отдела)).

%список, который выводит имя сотрудника, должность и зарплату в определнном отеделе
    инфо_о_сотрудниках(Название_отдела) = List2 :-
        отдел(ID_отдела, Название_отдела),
        !,
        List2 =
            [ сотрудник_должность_отдел(Имя_сотрудника, Должность, Зарплата) ||
                должность(ID_должности, Должность, ID_отдела, Зарплата),
                занимает(ID_сотрудника, ID_должности, _),
                сотрудник(ID_сотрудника, Имя_сотрудника, _, _, _, _)
            ].
% список, выводящий руководителей всех отделов
    инфо_о_руководителях() = List3 :-
        List3 =
            [ руководители_отделов(Название_отдела, Имя_сотрудника, Должность) ||
                отдел(ID_отдела, Название_отдела),
                должность("М001", Должность, ID_отдела, _),
                занимает(ID_сотрудника, "М001", _),
                сотрудник(ID_сотрудника, Имя_сотрудника, _, _, _, _)
                or
                отдел(ID_отдела, Название_отдела),
                должность("Р001", Должность, ID_отдела, _),
                занимает(ID_сотрудника, "Р001", _),
                сотрудник(ID_сотрудника, Имя_сотрудника, _, _, _, _)
                or
                отдел(ID_отдела, Название_отдела),
                должность("Н001", Должность, ID_отдела, _),
                занимает(ID_сотрудника, "Н001", _),
                сотрудник(ID_сотрудника, Имя_сотрудника, _, _, _, _)
                or
                отдел(ID_отдела, Название_отдела),
                должность("Д001", Должность, ID_отдела, _),
                занимает(ID_сотрудника, "Д001", _),
                сотрудник(ID_сотрудника, Имя_сотрудника, _, _, _, _)
            ].

%общая зарплата по определенному отделу
    общая_зп_по_отделу(Название_отдела) =
            сумма_элем(
                [ Зарплата ||
                    должность(ID_должности, _, ID_отдела, Зарплата),
                    занимает(ID_сотрудника, ID_должности, _),
                    сотрудник(ID_сотрудника, _, _, _, _, _)
                ]) :-
        отдел(ID_отдела, Название_отдела),
        !.

%средняя зарплата по определнному отделу
    средняя_зп_по_отделу(Название_отдела) =
            среднее_списка(
                [ Зарплата ||
                    должность(ID_должности, _, ID_отдела, Зарплата),
                    занимает(ID_сотрудника, ID_должности, _),
                    сотрудник(ID_сотрудника, _, _, _, _, _)
                ]) :-
        отдел(ID_отдела, Название_отдела),
        !.

%список сотрудников, у которых опыт работы больше трех лет в опреденном отделении
    сотрудник_по_опыту_работы(Название_отдела) = List5 :-
        отдел(ID_отдела, Название_отдела),
        !,
        List5 =
            [ Имя_сотрудника ||
                должность(ID_должности, _, ID_отдела, _),
                занимает(ID_сотрудника, ID_должности, _),
                сотрудник(ID_сотрудника, Имя_сотрудника, _, _, _, Опыт_работы),
                Опыт_работы > 3
            ].

%список сотрудников определенной должности
    сотрудники_по_заданной_должности(Должность) = List6 :-
        должность(ID_должности, Должность, _, _),
        !,
        List6 =
            [ Имя_сотрудника ||
                занимает(ID_сотрудника, ID_должности, _),
                сотрудник(ID_сотрудника, Имя_сотрудника, _, _, _, _)
            ].

%длина предыдущего списка
    кол_сотрудников(Должность) = длина(сотрудники_по_заданной_должности(Должность)).

%правила для вывода структур
    write_list_2(List) :-
        foreach сотрудник_должность_отдел(Имя_сотрудника, Должность, Зарплата) = list::getMember_nd(List) do
            write(Имя_сотрудника, "\t", Должность, "\t", Зарплата, "\t\n")
        end foreach.

    write_list_3(List) :-
        foreach руководители_отделов(Название_отдела, Имя_сотрудника, Должность) = list::getMember_nd(List) do
            write(Название_отдела, "\t", Имя_сотрудника, "\t", Должность, "\t\n")
        end foreach.

clauses
    run() :-
        file::consult("..\\company.txt", company),
        fail.

%Варианты ответа: Маркетинг, Разработка, HR, Дизайн
    run() :-
        Название_отдела = "Разработка",
        L = сотрудники_в_отделе(Название_отдела),
        writef("Сотрудники отдела % мужского пола: ", Название_отдела),
        write(L),
        write("\n"),
        write("Количество человек мужского пола =  "),
        write(кол_человек(Название_отдела)),
        write("\n"),
        fail.
%Варианты ответа: Маркетинг, Разработка, HR, Дизайн
    run() :-
        Название_отдела = "Дизайн",
        L = инфо_о_сотрудниках(Название_отдела),
        writef("\n"),
        writef("Информация о сотрудниках отедла %: ", Название_отдела),
        writef("\n"),
        write_list_2(L),
        fail.

    run() :-
        writef("\n"),
        writef("Информация о руководителях отделов: "),
        L = инфо_о_руководителях(),
        writef("\n"),
        write_list_3(L),
        fail.

%Варианты ответа: Маркетинг, Разработка, HR, Дизайн
    run() :-
        Название_отдела = "Разработка",
        writef("\n"),
        writef("Общая зарплата по отедлу %: ", Название_отдела),
        write(общая_зп_по_отделу(Название_отдела)),
        writef("\n"),
        writef("Средняя зарплата по отедлу %: ", Название_отдела),
        write(средняя_зп_по_отделу(Название_отдела)),
        fail.

%Варианты ответа: Маркетинг, Разработка, HR, Дизайн
    run() :-
        Название_отдела = "HR",
        L = сотрудник_по_опыту_работы(Название_отдела),
        writef("\n\n"),
        writef("Сотрудники в отделе % с опытом работы более 3 лет: ", Название_отдела),
        writef("\n"),
        write(L),
        fail.

%Варианты ответа: Менеджер, Разработчик, HR менеджер, Руководитель отдела продаж, Руководитель отдела разработки, HR директор, Арт-директор,
%Веб-дизайнер, Графический дизайнер
    run() :-
        Должность = "Менеджер",
        L = сотрудники_по_заданной_должности(Должность),
        writef("\n\n"),
        writef("Сотрудники с должностью %: \n", Должность),
        write(L),
        writef("\n"),
        writef("Количество сотрудников с должностью % =  ", Должность),
        write(кол_сотрудников(Должность)),
        writef("\n"),
        fail.

    run() :-
        succeed.

end implement main

goal
    console::runUtf8(main::run).
